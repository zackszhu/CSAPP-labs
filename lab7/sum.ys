# 5130379013 Zhu Chaojie

# Execution begins at address 0
	.pos 0
init:
	irmovl Stack, %esp  	# Set up Stack pointer
	irmovl Stack, %ebp  	# Set up base pointer
	jmp Main		# Execute main program

# Sample linked list
	.align 4
ele1:
	.long 0x00a
	.long ele2
ele2:
	.long 0x0b0
	.long ele3
ele3:
	.long 0xc00
	.long 0

Main:

	irmovl ele1, %edi 		# Set parameter
	pushl %edi
	call Sum

	halt

Sum:
	pushl %ebp
	rrmovl %esp, %ebp
	mrmovl 8(%ebp), %ecx
	irmovl $0, %eax			# Set %eax to zero

Loop:
	andl %ecx, %ecx 		# Check if valid address
	je Exit
	mrmovl (%ecx), %edx 	# Get value
	addl %edx, %eax			# val += ls->val;
	mrmovl 4(%ecx), %ecx 	# ls = ls->next;
	jmp Loop

Exit:
	rrmovl %ebp, %esp
	popl %ebp
	ret
	
	.pos 0x100
Stack:	# The stack
